<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[dom详解]]></title>
      <url>%2F2017%2F03%2F13%2Fdom%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[1 初始DOM 20.40 2017.3.6js由三部分组成ECMAscript 是js的核心标准，也是一个解析器DOM 是document提供的一些方法或熟悉用来操作页面BOM是window提供的一些方法或者属性用来操作浏览器 （拉倒底部数据加载） DOM (document object model) 文本对象模型 就是document提供一些api赋予开发者操作页面的能力 DOM结构是树形，顶端为DOM -&gt; 根元素 -&gt; …一般分为三大关系 父级关系 只有一层上下级关系（从当前往上走） 子级关系 只有一层以下一层的关系 兄弟关系 同一个父级 （同一级） 按照层级划分 父子节点： 上下两层节点之间的关系 祖先节点： 当前节点上面的所有节点 子孙节点： 当前节点下面的所有节点的统称 2 节点类型加例子 20.00 2017.3.6按照节点的类型划分查看某个节点类型 nodeType 返回一个数字 表示节点的类型整个页面都是节点都可以看做节点 节点分类 元素节点 nodeType: 1 element 就是一个标签 document nodeType: 9 元素中的文字(包括空格回车换行) nodeType: 3 注释节点 nodeType: 8 attributes 代表元素的属性 是一个集合 nodeType代表数字2 找到属性查看值nodeValue, nodeName查看节点的属性名 childNodes 某个节点下的所有子节点，是一个类数组下标为0 的时候可以打出标签的内容 1&lt;div&gt;12345&lt;/div&gt; 1234var odiv = document.getElementById('div');odiv.childNodes // [text] 类数组odiv.childNodes[0] // 123odiv.childNodes[0].nodeType // 3 12345&lt;div&gt; &lt;!--注释--&gt; 2222&lt;/div&gt;算两个子节点 childNodes[0].nodeType = 8 childNodes[1].nodeType = 3 注释节点如果查看注释的值? div.childNode[0].nodeValue 举个栗子 当点击页面的时候 li 改变宽度1234li &#123; transition: 1s; widht: 20px;&#125; 12345678&lt;ul id="ul"&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt;&lt;/ul&gt; 123456789var ul = document.getElementById('ul');va lis = ul.childNodes; // 11 个 包括空格和换行 &lt;li&gt;标签前后的document.onclick = function () &#123; for (var i = 0; i &lt; lis.length; i++ )&#123; if(lis[i].nodeType === 1 ) &#123; lis[i].style.width = '150px'; &#125; &#125;&#125; children: 不是标准的属性，但是所有浏览器都支持，找到摸个元素下所有元素子节点 * 1234567var ul = document.getElementById('ul');var lis = ul.childNodes; // 5 document.onclick = function () &#123; for (var i = 0; i &lt; lis.length; i++ )&#123; lis[i].style.width = '150px'; &#125;&#125; 3 父节点和兄弟节点parentNode查找某个元素的父节点 12345678&lt;ul id="ul"&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt;&lt;/ul&gt; 12345678 var ul = document.getElementById('ul'); var alis = ul.children; console.log(alis[0].innerHTML)console.log(alis[0].parentNode) // &lt;ul&gt;..&lt;/ul&gt;console.log(alis[0].parentNode. parentNode) // &lt;body&gt;console.log(alis[0].parentNode. parentNode. parentNode) // 页面中最大的父元素是document 再大就是null parentNode 例子 12345&lt;ul&gt; &lt;li&gt;&lt;a href="javascript:;"&gt;11&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="javascript:;"&gt;22&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="javascript:;"&gt;22&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 123456var a = document.getElementsById('a');for (var i = 0; i &lt; a.length; i++) &#123; a[i].onclick = function () &#123; this.parentNode.style.display = 'none'; &#125;&#125; nextElementSibling 找到某个元素的下个兄弟节点 nextElementSibling举例12345&lt;ul&gt; &lt;li&gt;&lt;a href="javascript:;"&gt;11&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="javascript:;"&gt;22&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="javascript:;"&gt;33&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 12345var ul = document.getElementsById('ul');var alis = ul.children;console.log(alis[0].nextElementSibling) // &lt;li&gt;22&lt;/li&gt;console.log(alis[0].nextElementSibling. nextElementSibling) // &lt;li&gt;33&lt;/li&gt; 超出为null previousElementSibling 找到某个元素的上个兄弟节点 previousElementSibling 举例同 nextElementSibling firstElementChild找到第一个子节点 lastElementChild 找到最后一个子节点 1234var ul = document.getElementById('ul');ul.firstElementChild; // &lt;li&gt;111&lt;/li&gt;ul.lastElementChild; // &lt;li&gt;333&lt;/li&gt; 4 节点例子 2017.3.8 例子见代码5 offseLeft、offsetParentoffsetParent 最近的有定位属性的祖先节点, 如果父节点都没有定位，默认定位是body，否则是定位该元素父级上设置position: relative的元素。 123456789&lt;div id="div1"&gt; &lt;div id="div2"&gt; &lt;div id="div3"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; var div3 = document.getElementById('div3'); console.log(div3.offsetParent);&lt;/script&gt; 123456789101112131415div &#123; padding: 100px;&#125;#div1 &#123; background: red; position: relative;&#125;#div2 &#123; background: blue;&#125;#div3 &#123; background: green;&#125; offsetLeft 外边框到有定位父级的内边框的距离, 如果没有父级position: relative的定位，子级也没有position: absolute,定位默认到body。和offsetParent有关, 得到的数字没有单位。 offsetTop 上边框到有定位父级的上呗边框的距离 这里注意没有offsetRight和offsetBottom 使用场景：方便获取元素的位置 getComputedStyle(div3).left 也可以得到，有单位。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[犀牛书第二章 词法结构]]></title>
      <url>%2F2017%2F03%2F13%2F%E7%8A%80%E7%89%9B%E4%B9%A6%E7%AC%AC%E4%BA%8C%E7%AB%A0%2F</url>
      <content type="text"><![CDATA[2.1 字符集 javascript 程序是Unicode字符集编写的。 javascript 区分大小写。 HTML 不区分大小写。 Unicode允许多种方法进行编码，显示结果一样，但是处理方式不一样。 2.2 注释 可以使用 // 或者 /**/注释，但是不能嵌套。(P27) 2.3 直接量 可以直接使用的数据值 2.4 标识符和保留字标识符就是用来对变量和函数进行命名，或者循环语句中位置标记JavaScript必须以字母，下划线或$开始。后接的可以字母，数字，下划线，美元符。（数字不能出现在首字母）也可以用非英文语言或数字作为标识符，比如π也不能使用保留字作为标识符。 2.5 可选分号语句用分号分开。（P30）如果独占一行可以省略分号。无法解析的两个例外 return break和continue随后的表达式之间不能换行，系统会自动添加分号。 ++ --作为表达式的后缀，应该和表达式在同一行。 否则，行尾将填补分号。 1234567var aa=3//解析为 // var a // a = 3 如果以 （ [ / + - 开始极有可能和之前语句合在一起解析。1234var y = x+ f(a+b).toString()//解析//var y = x+ f(a+b).toString(); 涉及return、break、continue。则不能换行 12345returntrue //解析 //teturn; //true 涉及到 ++ 或 – 123456x++y//解析//x;//++y;]]></content>
    </entry>

    
  
  
</search>
